-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- TITLE -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
1. Two Sums
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- QUESTION -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one
solution, and you may not use the same element twice. You can return the answer in any order.

Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

Constraints:
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109

Only one valid answer exists.


-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- EXPLANATION -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
* In input we are receiving two elements first an array which is named as 'nums' and second is the 'target'
* Addition on two numbers will result us into the 'target'. But we cannot add the number of the same index
    - For example 3: nums => [3, 3] and target => 6
    - As per the rule we cannot add nums[0] + num[0] to get the target as 6, But we can add nums[0] + nums[1] to get the target as 6
* We need to return the index of elements. Whose sums of value will be equal to the target

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- SOLUTION -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
* To solve this problem we will require two for loops
* To store results we will use the variable 'res' which is empty list []
* First for loop we will use for the first index purpose and the second for loop we will use for second index purpose
* We will iterate both the for loops in nested manner and inside the second for loop we will two conditions
    - First: The index of must not be same
    - Second: The addition of Value of 'first for loop' and 'second for loop' is equal to target
* If above both the conditions are satisfied then we will append index of both the for loop elements into 'res'
* If above both the conditions are not satisfied then we will move on to next element until the problem is resolved.
